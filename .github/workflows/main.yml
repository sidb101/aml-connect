name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "develop", "release"]
  pull_request:
    branches: [ "develop", "release"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Setup Python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Create and start virtual environment
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
      
      - name: Install aspinity .whl
        run: |
          pip install ./aml_simulator_pywrapper/aspinity-0.7.2-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
      
      - name: Install requirements.txt
        run: |
          pip install -r ./aml_simulator_pywrapper/requirements.txt

      - name: Setup PYTHONPATH
        run: |
          export PYTHONPATH="${PYTHONPATH}:${pwd}/aml_simulator_pywrapper"

      - name: install OS dependencies (ubuntu only)
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.0-dev \
          build-essential \
          curl \
          wget \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          python-pip
        
      - name: Run Pylint
        run: |
          cd aml_simulator_pywrapper && 
          pylint *.py && 
          cd ..
      
      - name: Run Pytest tests
        run: |
          cd aml_simulator_pywrapper && 
          pytest . && 
          cd ..

      - name: Create Aspinity Wrapper Binary
        run: |
          cd aml_simulator_pywrapper && 
          pyinstaller --clean -F simulator_wrapper.py --distpath ../src-tauri/binaries/ -n aspinity_wrapper-x86_64-unknown-linux-gnu

      # Setup Rust
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
      
      # Setup Rust Cache so consecutive builds are faster   
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target

      
      # Sync node version and setup node cache
      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
        
      # Install node dependencies
      - name: Install frontend dependencies
        run: npm install
      
      # Runs a single command using the runners shell
      - name: Run Rust backend tests
        run: cd src-tauri && cargo test && cd ..

      # Run tauri-action build
      - name: Build the app using Tauri Action
        uses: tauri-apps/tauri-action@v0
      
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'AML-Connect v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          prerelease: true
