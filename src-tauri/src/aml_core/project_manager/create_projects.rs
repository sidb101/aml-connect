use std::path::PathBuf;

use diesel::{result::Error::NotFound, ExpressionMethods, QueryDsl, RunQueryDsl};

use anyhow::Context;

use crate::aml_core::{
    db_adapter::{models::NewProject, schema::projects, DbConn},
    AppError, file_data_manager,
};

use super::{
    CreateProjectRequest, CreateProjectResponse, CreateProjectResponseResult, ProjectDetails,
    ProjectManagerError, 
};

pub fn create_project(
    req: &CreateProjectRequest, //TODO: is slug generated in frontend or backend? //if generated by backend, use name to check whether proj exists
    app_dir: &PathBuf, //stored in the application state
    conn: &mut DbConn
) -> CreateProjectResponseResult {
    log::info!("create_project request received");

    let match_count = projects::table
        .filter(projects::slug.eq(req.slug))
        .count()
        .get_result::<i64>(conn);
    
    match match_count {
        Ok(count) => {
            if count >= 1 {
                let error_message = format!("Project with slug '{}' already exists", req.slug);
                //return Err(AppError::ProjectExists(error_message));
                return Err(AppError::ProjectManagerError(ProjectManagerError::ProjectExists(error_message.into())));
            } else {
                log::info!("project doesnt exist, can create");
                let new_project = NewProject {
                    slug: req.slug.to_owned(),
                    name: req.name.to_owned(),
                    description: req.description.map(|desc| desc.to_owned()),
                };
                
                //look into models.rs for the project schema, then transfer to projectdetails struct
                let project_details: ProjectDetails = diesel::insert_into(projects::table)
                    .values(&new_project)
                    .returning((
                        projects::id,
                        projects::slug,
                        projects::name,
                        projects::description,
                        projects::modified_at,
                        projects::created_at,
                    ))
                    .get_result(conn)
                    .with_context(|| format!("failed to insert new project: {}", req.slug))?;
                
                file_data_manager::create_project_dir(&req.slug, app_dir)?;
                    //panic!("Could not create project dir :{:?}", e); //TODO: return error instead of panic
            
                log::info!("create_project response: {:?}", project_details);
                
                return Ok(CreateProjectResponse{
                            project: project_details
                        })
            }
        }
        Err(e) => {
            Err(AppError::InternalError(e.to_string()))
        }
    }

    
    
    
}