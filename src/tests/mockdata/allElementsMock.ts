import type { ElementT } from "../../redux/slices/ModelCreationSlice";
import { DirectionT, ParamTypeT, RangeT, UIComponentT } from "../../redux/slices/ModelCreationSlice";
import type { ElementMetadata } from "../../service/RemoteService/client/bindings/ElementMetadata";
import type { TerminalDirection } from "../../service/RemoteService/client/bindings/TerminalDirection";
import type { ParameterType } from "../../service/RemoteService/client/bindings/ParameterType";
import type { RangeType } from "../../service/RemoteService/client/bindings/RangeType";
import type { UIComponentType } from "../../service/RemoteService/client/bindings/UIComponentType";

export const backendElements: Record<string, ElementMetadata> = {
	AcDiff: {
		short_description: "ac-coupled difference amplifier",
		long_description:
			"Amplifies the ac difference between the input terminals. Specifically, the response is: output = gain(hpf(pos) - hpf(neg)) where hpf is a low-frequency (i.e. sub-Hz) highpass filter. AcDiff is often used to interface with external signals for which the dc operating point is unknown.",
		type_name: "AcDiff",
		terminals: {
			pos: {
				description: "Noninverting input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "Out range/gain",
			},
			neg: {
				description: "Inverting input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "Out range/gain",
			},
			output: {
				description: "output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "mid-centered",
				ac_range: "+/-0.6V",
			},
		},
		parameters: {
			gain: {
				parameter_type: "number" as ParameterType,
				description: "single-ended gain",
				default: "9.0",
				range_type: "discrete" as RangeType,
				range: ["0.111", "0.4285", "2.333", "9"],
				unit: "V",
				ui_component: "dropdown" as UIComponentType,
			},
		},
	},
	AsymmetricIntegrator: {
		short_description: "Asymmetric integrator",
		long_description:
			"An integrator in measurement and control applications is an element whose output signal is the time integral of its input signal. It accumulates the input quantity over a defined time to produce a representative output. The integrator produces a voltage output proportional to the product of the input voltage and time. The asymmetric integrator can integrate the rise and fall of the input signal at different rates (different slopes used to integrate the rise and fall of the input). These are generally used as part of decision making in an application. For example, asymmetric integrators can be used to reject spurious triggers (triggers that are either too long or too short that we don't want to catch).",
		type_name: "AsymmetricIntegrator",
		terminals: {
			input: {
				description: "input",
				direction: "input" as TerminalDirection,
				default: null,
				dc_range: "rail-to-rail",
				ac_range: null,
			},
			output: {
				description: "output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: null,
				ac_range: null,
			},
		},
		parameters: {
			up: {
				parameter_type: "number" as ParameterType,
				description: "Rate of upward slope",
				default: "100",
				range_type: "interval" as RangeType,
				range: [null, null],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
			down: {
				parameter_type: "number" as ParameterType,
				description: "Rate of downward slope",
				default: "10",
				range_type: "interval" as RangeType,
				range: [null, null],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
			up_down_type: {
				parameter_type: "string" as ParameterType,
				description: "slope type",
				default: "UpDownType.Rate",
				range_type: "discrete" as RangeType,
				range: ["Rate", "Hand"],
				unit: null,
				ui_component: "dropdown" as UIComponentType,
			},
			comparator_enable: {
				parameter_type: "boolean" as ParameterType,
				description: "Pass output through comparator",
				default: "false",
				range_type: "discrete" as RangeType,
				range: ["true", "false"],
				unit: null,
				ui_component: "checkbox" as UIComponentType,
			},
		},
	},
	Comparator: {
		short_description: "Comparator",
		long_description:
			"The comparator compares one analog voltage level with another analog voltage level (or some preset reference voltage), and produces an output signal based on this voltage comparison. In other words, the voltage comparator compares the magnitudes of two voltage inputs and determines which is the largest of the two.",
		type_name: "Comparator",
		terminals: {
			positive: {
				description: "Noninverting input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: null,
			},
			negative: {
				description: "Inverting input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "mid-centered",
				ac_range: null,
			},
			vdd: {
				description: "Supply voltage input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail",
				ac_range: null,
			},
			output: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "mid",
				dc_range: "mid-centered",
				ac_range: "0 to vdd",
			},
		},
		parameters: {
			threshold: {
				parameter_type: "number" as ParameterType,
				description: "Comparison threshold",
				default: "0",
				range_type: "interval" as RangeType,
				range: [null, null],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
		},
	},
	Filter: {
		short_description: "Filter",
		long_description:
			"A filter is a circuit capable of passing (or amplifying) certain frequencies while attenuating other frequencies.",
		type_name: "Filter",
		terminals: {
			input: {
				description: "Input",
				direction: "input" as TerminalDirection,
				default: null,
				dc_range: "rail-to-rail",
				ac_range: null,
			},
			output: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "mid-centered",
				ac_range: "+/- 0.1V",
			},
		},
		parameters: {
			characteristic_frequency: {
				parameter_type: "number" as ParameterType,
				description: "Comparison threshold",
				default: "1000",
				range_type: "interval" as RangeType,
				range: ["1", "200000"],
				unit: "Hz",
				ui_component: "textbox" as UIComponentType,
			},
			quality_factor: {
				parameter_type: "number" as ParameterType,
				description: "Comparison threshold",
				default: "2",
				range_type: "interval" as RangeType,
				range: ["0.3", "4.5"],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
			filter_type: {
				parameter_type: "string" as ParameterType,
				description: "Comparison threshold",
				default: "bpf2",
				range_type: "discrete" as RangeType,
				range: ["bpf2", "lpf2", "hpf2", "lpf1"],
				unit: null,
				ui_component: "dropdown" as UIComponentType,
			},
		},
	},
	Filterbank: {
		short_description: "Filterbank",
		long_description:
			"A filterbank is an array of bandpass filters that separates the input signal into multiple components, each one carrying a single frequency subband of the original signal.",
		type_name: "Filterbank",
		terminals: {
			input: {
				description: "Input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "+/- 0.1V",
			},
			out_0: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "out_0",
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
			out_1: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "out_1",
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
			out_2: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "out_2",
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
			out_3: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "out_3",
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
			out_4: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "out_4",
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
			out_5: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "out_5",
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
			out_6: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "out_6",
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
			out_7: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: "out_7",
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
		},
		parameters: {
			band_frequencies: {
				parameter_type: "number" as ParameterType,
				description: "List of Center frequencies for the subband components",
				default: "[1000, 5000]",
				range_type: "interval" as RangeType,
				range: ["1", "200000"],
				unit: "Hz",
				ui_component: "textbox" as UIComponentType,
			},
			quality_factor: {
				parameter_type: "number" as ParameterType,
				description: "List of individual filter quality factors",
				default: "[1,1]",
				range_type: "interval" as RangeType,
				range: ["0.3", "4.5"],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
			attack_rates: {
				parameter_type: "string" as ParameterType,
				description: "List of attack rates for the subband components",
				default: null,
				range_type: "interval" as RangeType,
				range: [null, null],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
			decay_rates: {
				parameter_type: "string" as ParameterType,
				description: "List of decay rates for the subband components",
				default: null,
				range_type: "interval" as RangeType,
				range: [null, null],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
		},
	},
	GainOpamp: {
		short_description: "GainOpAmp",
		long_description: "`GainOpamp` is one of several ways to amplify signals. ",
		type_name: "GainOpAmp",
		terminals: {
			input: {
				description: "Input",
				direction: "input" as TerminalDirection,
				default: null,
				dc_range: "`reference`-centered",
				ac_range: "Out range / gain",
			},
			reference: {
				description: '"Virtual ground" if used ',
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "Out range / gain (but normally dc)",
			},
			output: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "rail-to-rail",
				ac_range: "+/- 1.2V",
			},
		},
		parameters: {
			gain_mode: {
				parameter_type: "string" as ParameterType,
				description: "Gain",
				default: "Inverting10x",
				range_type: "discrete" as RangeType,
				range: [
					"Noninverting1x",
					"Noninverting11x",
					"Inverting2x",
					"Inverting4x",
					"Inverting10x",
					"Inverting20x",
				],
				unit: null,
				ui_component: "dropdown" as UIComponentType,
			},
			feedback_cap_count: {
				parameter_type: "number" as ParameterType,
				description: "Incremental (4.7pF) capacitance",
				default: "0",
				range_type: "interval" as RangeType,
				range: ["0", "7"],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
		},
	},
	LookupTable: {
		short_description: "LookupTable",
		long_description: "`LookupTable` implements arbitrary 3-input logic functions.",
		type_name: "LookupTable",
		terminals: {
			A: {
				description: "Input A",
				direction: "input" as TerminalDirection,
				default: "gnd",
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
			B: {
				description: "Input B",
				direction: "input" as TerminalDirection,
				default: "gnd",
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
			C: {
				description: "Input C",
				direction: "input" as TerminalDirection,
				default: "gnd",
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
			output: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
		},
		parameters: {
			expression: {
				parameter_type: "string" as ParameterType,
				description: "Python format lookup table logic expression",
				default: "1",
				range_type: "interval" as RangeType,
				range: [null, null],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
		},
	},
	DelayFlipFlop: {
		short_description: "DelayFlipFlop",
		long_description: "DelayFlipFlop implements a standard delay flip-flop.",
		type_name: "DelayFlipFlop",
		terminals: {
			input: {
				description: "Delay input",
				direction: "input" as TerminalDirection,
				default: "vdd",
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
			reset: {
				description: "Reset",
				direction: "input" as TerminalDirection,
				default: "gnd",
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
			clock: {
				description: "Clock",
				direction: "input" as TerminalDirection,
				default: "gnd",
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
			output: {
				description: "Output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
		},
	},
	Multiplier: {
		short_description: "Multiplier",
		long_description:
			"Multiplier can multiply two signals. The two signal inputs are differential, so it can simultaneously perform subtraction.",
		type_name: "Multiplier",
		terminals: {
			x_pos: {
				description: "Noninverting input x",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "x_neg+/-0.1V",
			},
			x_neg: {
				description: "inverting input x",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "x_pos+/-0.1V",
			},
			y_pos: {
				description: "Noninverting input y",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "y_neg+/-0.1V",
			},
			y_neg: {
				description: "inverting input y",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "y_pos+/-0.1V",
			},
			output: {
				description: "output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "mid-centered",
				ac_range: "mid+/-0.1V",
			},
		},
		parameters: {
			slope: {
				parameter_type: "number" as ParameterType,
				description: "gain for x and y inputs",
				default: "1",
				range_type: "interval" as RangeType,
				range: ["0.1", "5"],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
		},
	},
	Mux2: {
		short_description: "two input analog multiplexer",
		long_description: "Mux2 allows selecting between two signals",
		type_name: "Mux2",
		terminals: {
			in0: {
				description: "Normally connected input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "rail-to-rail",
			},
			in1: {
				description: "Normally open input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "rail-to-rail",
			},
			select: {
				description: "Select in1 when high",
				direction: "input" as TerminalDirection,
				default: "gnd",
				dc_range: "logic levels",
				ac_range: "logic levels",
			},
			output: {
				description: "output connected to one of in0/in1",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "rail-to-rail",
				ac_range: "rail-to-rail",
			},
		},
		parameters: {},
	},
	PeakDetector: {
		short_description: "Energy detector to track the input envelope",
		long_description:
			"A peak detector is also called an energy detector or an envelope detector. It tracks the envelope of the input signal. The peak detector can be set to track the envelope at different rates. Higher rates can be used to track the peaks of the envelope, and lower rates can be used to track the baseline. RMS tracking, demodulation and baseline tracking are a few examples where the peak detector can be used.",
		type_name: "PeakDetector",
		terminals: {
			input: {
				description: "input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: null,
			},
			output: {
				description: "output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "mid-to-(mid+0.1)",
				ac_range: null,
			},
		},
		parameters: {
			atk: {
				parameter_type: "number" as ParameterType,
				description: "attack rate",
				default: "10000",
				range_type: "interval" as RangeType,
				range: ["3", null],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
			dec: {
				parameter_type: "number" as ParameterType,
				description: "decay rate",
				default: "50",
				range_type: "interval" as RangeType,
				range: ["3", null],
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
			model_version: {
				parameter_type: "string" as ParameterType,
				description: "Version of simulation model",
				default: "ModelVersion.SecondOrder",
				range_type: "discrete" as RangeType,
				range: ["FirstOrder", "SecondOrder"],
				unit: null,
				ui_component: "dropdown" as UIComponentType,
			},
		},
	},
	PGA: {
		short_description: "Multi-input programmable gain amplifier",
		long_description:
			"PGA performs the operation A_v1 * (V_pos - V_neg) + A_v2 * V_2, making it useful for liear functino synthesis to add, subtract, and scale signals.",
		type_name: "PGA",
		terminals: {
			pos1: {
				description: "Noninverting input w/ gain Av1",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "+/-0.1V",
			},
			neg1: {
				description: "Inverting input w/ gain Av1",
				direction: "output" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "+/-0.1V",
			},
			pos2: {
				description: "Noninverting input w/ gain Av2",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "mid-centered",
				ac_range: "+/-0.1V",
			},
			reference: {
				description: "unity-gain reference point",
				direction: "output" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "+/-0.1V",
			},
			output: {
				description: "output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "ref +/-0.1V",
				ac_range: "ref +/-0.1V",
			},
		},
		parameters: {
			Av1: {
				parameter_type: "number" as ParameterType,
				description: "Gain for pos1 & neg1 inputs",
				default: "1",
				range_type: "interval" as RangeType,
				range: ["0.1", "5"],
				unit: "V",
				ui_component: "textbox" as UIComponentType,
			},
			Av2: {
				parameter_type: "number" as ParameterType,
				description: "Gain for pos2",
				default: "0.5",
				range_type: "interval" as RangeType,
				range: ["0.1", "5"],
				unit: "V",
				ui_component: "textbox" as UIComponentType,
			},
		},
	},
	SynthesizedFilter: {
		short_description: "Synthesize different types of higher order filters",
		long_description:
			"This component is used to synthesize higher order filters from a set of coefficients. Higher order and other complex filters of different types like Butterwoth, Chebyshev, Bessel etc can be designed and synthesized.",
		type_name: "SynthesizedFilter",
		terminals: {
			input: {
				description: "input",
				direction: "input" as TerminalDirection,
				default: "mid",
				dc_range: "rail-to-rail",
				ac_range: "+/-0.1V",
			},
			output: {
				description: "output",
				direction: "output" as TerminalDirection,
				default: null,
				dc_range: "mid-centered",
				ac_range: null,
			},
		},
		parameters: {
			coefficients: {
				parameter_type: "string" as ParameterType,
				description: "List of second order section coefficients",
				default: null,
				range_type: null,
				range: null,
				unit: null,
				ui_component: "textbox" as UIComponentType,
			},
		},
	},
	Terminal: {
		short_description: "Terminal as Element",
		long_description: "Terminal as Element",
		type_name: "Terminal",
		terminals: {
			net: {
				description: "terminal",
				direction: null,
				default: null,
				dc_range: null,
				ac_range: null,
			},
		},
		parameters: {
			hardware_pin: {
				parameter_type: "string",
				description: "hardware pin",
				default: null,
				range_type: null,
				range: null,
				unit: null,
				ui_component: "textbox",
			},
			is_input: {
				parameter_type: "boolean",
				description: "is_input",
				default: "false",
				range_type: "discrete",
				range: ["true", "false"],
				unit: null,
				ui_component: "checkbox",
			},
			is_output: {
				parameter_type: "boolean",
				description: "is_output",
				default: "false",
				range_type: "discrete",
				range: ["true", "false"],
				unit: null,
				ui_component: "checkbox",
			},
		},
	},
};

export const transformedElements: Record<string, ElementT> = {
	AcDiff: {
		shortDescription: "ac-coupled difference amplifier",
		longDescription:
			"Amplifies the ac difference between the input terminals. Specifically, the response is: output = gain(hpf(pos) - hpf(neg)) where hpf is a low-frequency (i.e. sub-Hz) highpass filter. AcDiff is often used to interface with external signals for which the dc operating point is unknown.",
		typeName: "AcDiff",
		terminals: {
			pos: {
				description: "Noninverting input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "Out range/gain",
			},
			neg: {
				description: "Inverting input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "Out range/gain",
			},
			output: {
				description: "output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "mid-centered",
				acRange: "+/-0.6V",
			},
		},
		parameters: {
			gain: {
				parameterType: ParamTypeT.NUMBER,
				description: "single-ended gain",
				default: "9.0",
				rangeType: RangeT.DISCRETE,
				range: ["0.111", "0.4285", "2.333", "9"],
				unit: "V",
				uiComponent: UIComponentT.DROPDOWN,
			},
		},
	},
	AsymmetricIntegrator: {
		shortDescription: "Asymmetric integrator",
		longDescription:
			"An integrator in measurement and control applications is an element whose output signal is the time integral of its input signal. It accumulates the input quantity over a defined time to produce a representative output. The integrator produces a voltage output proportional to the product of the input voltage and time. The asymmetric integrator can integrate the rise and fall of the input signal at different rates (different slopes used to integrate the rise and fall of the input). These are generally used as part of decision making in an application. For example, asymmetric integrators can be used to reject spurious triggers (triggers that are either too long or too short that we don't want to catch).",
		typeName: "AsymmetricIntegrator",
		terminals: {
			input: {
				description: "input",
				direction: DirectionT.INPUT,
				default: null,
				dcRange: "rail-to-rail",
				acRange: undefined,
			},
			output: {
				description: "output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: undefined,
				acRange: undefined,
			},
		},
		parameters: {
			up: {
				parameterType: ParamTypeT.NUMBER,
				description: "Rate of upward slope",
				default: "100",
				rangeType: RangeT.INTERVAL,
				range: [null, null],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			down: {
				parameterType: ParamTypeT.NUMBER,
				description: "Rate of downward slope",
				default: "10",
				rangeType: RangeT.INTERVAL,
				range: [null, null],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			up_down_type: {
				parameterType: ParamTypeT.STRING,
				description: "slope type",
				default: "UpDownType.Rate",
				rangeType: RangeT.DISCRETE,
				range: ["Rate", "Hand"],
				unit: undefined,
				uiComponent: UIComponentT.DROPDOWN,
			},
			comparator_enable: {
				parameterType: ParamTypeT.BOOLEAN,
				description: "Pass output through comparator",
				default: "false",
				rangeType: RangeT.DISCRETE,
				range: ["true", "false"],
				unit: undefined,
				uiComponent: UIComponentT.CHECKBOX,
			},
		},
	},
	Comparator: {
		shortDescription: "Comparator",
		longDescription:
			"The comparator compares one analog voltage level with another analog voltage level (or some preset reference voltage), and produces an output signal based on this voltage comparison. In other words, the voltage comparator compares the magnitudes of two voltage inputs and determines which is the largest of the two.",
		typeName: "Comparator",
		terminals: {
			positive: {
				description: "Noninverting input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: undefined,
			},
			negative: {
				description: "Inverting input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "mid-centered",
				acRange: undefined,
			},
			vdd: {
				description: "Supply voltage input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail",
				acRange: undefined,
			},
			output: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "mid",
				dcRange: "mid-centered",
				acRange: "0 to vdd",
			},
		},
		parameters: {
			threshold: {
				parameterType: ParamTypeT.NUMBER,
				description: "Comparison threshold",
				default: "0",
				rangeType: RangeT.INTERVAL,
				range: [null, null],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
		},
	},
	Filter: {
		shortDescription: "Filter",
		longDescription:
			"A filter is a circuit capable of passing (or amplifying) certain frequencies while attenuating other frequencies.",
		typeName: "Filter",
		terminals: {
			input: {
				description: "Input",
				direction: DirectionT.INPUT,
				default: null,
				dcRange: "rail-to-rail",
				acRange: undefined,
			},
			output: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "mid-centered",
				acRange: "+/- 0.1V",
			},
		},
		parameters: {
			characteristic_frequency: {
				parameterType: ParamTypeT.NUMBER,
				description: "Comparison threshold",
				default: "1000",
				rangeType: RangeT.INTERVAL,
				range: ["1", "200000"],
				unit: "Hz",
				uiComponent: UIComponentT.TEXTBOX,
			},
			quality_factor: {
				parameterType: ParamTypeT.NUMBER,
				description: "Comparison threshold",
				default: "2",
				rangeType: RangeT.INTERVAL,
				range: ["0.3", "4.5"],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			filter_type: {
				parameterType: ParamTypeT.STRING,
				description: "Comparison threshold",
				default: "bpf2",
				rangeType: RangeT.DISCRETE,
				range: ["bpf2", "lpf2", "hpf2", "lpf1"],
				unit: undefined,
				uiComponent: UIComponentT.DROPDOWN,
			},
		},
	},
	Filterbank: {
		shortDescription: "Filterbank",
		longDescription:
			"A filterbank is an array of bandpass filters that separates the input signal into multiple components, each one carrying a single frequency subband of the original signal.",
		typeName: "Filterbank",
		terminals: {
			input: {
				description: "Input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "+/- 0.1V",
			},
			out_0: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "out_0",
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
			out_1: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "out_1",
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
			out_2: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "out_2",
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
			out_3: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "out_3",
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
			out_4: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "out_4",
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
			out_5: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "out_5",
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
			out_6: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "out_6",
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
			out_7: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: "out_7",
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
		},
		parameters: {
			band_frequencies: {
				parameterType: ParamTypeT.NUMBER,
				description: "List of Center frequencies for the subband components",
				default: "[1000, 5000]",
				rangeType: RangeT.INTERVAL,
				range: ["1", "200000"],
				unit: "Hz",
				uiComponent: UIComponentT.TEXTBOX,
			},
			quality_factor: {
				parameterType: ParamTypeT.NUMBER,
				description: "List of individual filter quality factors",
				default: "[1,1]",
				rangeType: RangeT.INTERVAL,
				range: ["0.3", "4.5"],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			attack_rates: {
				parameterType: ParamTypeT.STRING,
				description: "List of attack rates for the subband components",
				default: null,
				rangeType: RangeT.INTERVAL,
				range: [null, null],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			decay_rates: {
				parameterType: ParamTypeT.STRING,
				description: "List of decay rates for the subband components",
				default: null,
				rangeType: RangeT.INTERVAL,
				range: [null, null],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
		},
	},
	GainOpamp: {
		shortDescription: "GainOpAmp",
		longDescription: "`GainOpamp` is one of several ways to amplify signals. ",
		typeName: "GainOpAmp",
		terminals: {
			input: {
				description: "Input",
				direction: DirectionT.INPUT,
				default: null,
				dcRange: "`reference`-centered",
				acRange: "Out range / gain",
			},
			reference: {
				description: '"Virtual ground" if used ',
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "Out range / gain (but normally dc)",
			},
			output: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "rail-to-rail",
				acRange: "+/- 1.2V",
			},
		},
		parameters: {
			gain_mode: {
				parameterType: ParamTypeT.STRING,
				description: "Gain",
				default: "Inverting10x",
				rangeType: RangeT.DISCRETE,
				range: [
					"Noninverting1x",
					"Noninverting11x",
					"Inverting2x",
					"Inverting4x",
					"Inverting10x",
					"Inverting20x",
				],
				unit: undefined,
				uiComponent: UIComponentT.DROPDOWN,
			},
			feedback_cap_count: {
				parameterType: ParamTypeT.NUMBER,
				description: "Incremental (4.7pF) capacitance",
				default: "0",
				rangeType: RangeT.INTERVAL,
				range: ["0", "7"],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
		},
	},
	LookupTable: {
		shortDescription: "LookupTable",
		longDescription: "`LookupTable` implements arbitrary 3-input logic functions.",
		typeName: "LookupTable",
		terminals: {
			A: {
				description: "Input A",
				direction: DirectionT.INPUT,
				default: "gnd",
				dcRange: "logic levels",
				acRange: "logic levels",
			},
			B: {
				description: "Input B",
				direction: DirectionT.INPUT,
				default: "gnd",
				dcRange: "logic levels",
				acRange: "logic levels",
			},
			C: {
				description: "Input C",
				direction: DirectionT.INPUT,
				default: "gnd",
				dcRange: "logic levels",
				acRange: "logic levels",
			},
			output: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "logic levels",
				acRange: "logic levels",
			},
		},
		parameters: {
			expression: {
				parameterType: ParamTypeT.STRING,
				description: "Python format lookup table logic expression",
				default: "1",
				rangeType: RangeT.INTERVAL,
				range: [null, null],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
		},
	},
	DelayFlipFlop: {
		shortDescription: "DelayFlipFlop",
		longDescription: "DelayFlipFlop implements a standard delay flip-flop.",
		typeName: "DelayFlipFlop",
		terminals: {
			input: {
				description: "Delay input",
				direction: DirectionT.INPUT,
				default: "vdd",
				dcRange: "logic levels",
				acRange: "logic levels",
			},
			reset: {
				description: "Reset",
				direction: DirectionT.INPUT,
				default: "gnd",
				dcRange: "logic levels",
				acRange: "logic levels",
			},
			clock: {
				description: "Clock",
				direction: DirectionT.INPUT,
				default: "gnd",
				dcRange: "logic levels",
				acRange: "logic levels",
			},
			output: {
				description: "Output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "logic levels",
				acRange: "logic levels",
			},
		},
		parameters: undefined,
	},
	Multiplier: {
		shortDescription: "Multiplier",
		longDescription:
			"Multiplier can multiply two signals. The two signal inputs are differential, so it can simultaneously perform subtraction.",
		typeName: "Multiplier",
		terminals: {
			x_pos: {
				description: "Noninverting input x",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "x_neg+/-0.1V",
			},
			x_neg: {
				description: "inverting input x",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "x_pos+/-0.1V",
			},
			y_pos: {
				description: "Noninverting input y",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "y_neg+/-0.1V",
			},
			y_neg: {
				description: "inverting input y",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "y_pos+/-0.1V",
			},
			output: {
				description: "output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "mid-centered",
				acRange: "mid+/-0.1V",
			},
		},
		parameters: {
			slope: {
				parameterType: ParamTypeT.NUMBER,
				description: "gain for x and y inputs",
				default: "1",
				rangeType: RangeT.INTERVAL,
				range: ["0.1", "5"],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
		},
	},
	Mux2: {
		shortDescription: "two input analog multiplexer",
		longDescription: "Mux2 allows selecting between two signals",
		typeName: "Mux2",
		terminals: {
			in0: {
				description: "Normally connected input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "rail-to-rail",
			},
			in1: {
				description: "Normally open input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "rail-to-rail",
			},
			select: {
				description: "Select in1 when high",
				direction: DirectionT.INPUT,
				default: "gnd",
				dcRange: "logic levels",
				acRange: "logic levels",
			},
			output: {
				description: "output connected to one of in0/in1",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "rail-to-rail",
				acRange: "rail-to-rail",
			},
		},
		parameters: {},
	},
	PeakDetector: {
		shortDescription: "Energy detector to track the input envelope",
		longDescription:
			"A peak detector is also called an energy detector or an envelope detector. It tracks the envelope of the input signal. The peak detector can be set to track the envelope at different rates. Higher rates can be used to track the peaks of the envelope, and lower rates can be used to track the baseline. RMS tracking, demodulation and baseline tracking are a few examples where the peak detector can be used.",
		typeName: "PeakDetector",
		terminals: {
			input: {
				description: "input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: undefined,
			},
			output: {
				description: "output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "mid-to-(mid+0.1)",
				acRange: undefined,
			},
		},
		parameters: {
			atk: {
				parameterType: ParamTypeT.NUMBER,
				description: "attack rate",
				default: "10000",
				rangeType: RangeT.INTERVAL,
				range: ["3", null],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			dec: {
				parameterType: ParamTypeT.NUMBER,
				description: "decay rate",
				default: "50",
				rangeType: RangeT.INTERVAL,
				range: ["3", null],
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			model_version: {
				parameterType: ParamTypeT.STRING,
				description: "Version of simulation model",
				default: "ModelVersion.SecondOrder",
				rangeType: RangeT.DISCRETE,
				range: ["ModelVersion.FirstOrder", "ModelVersion.SecondOrder"],
				unit: undefined,
				uiComponent: UIComponentT.DROPDOWN,
			},
		},
	},
	PGA: {
		shortDescription: "Multi-input programmable gain amplifier",
		longDescription:
			"PGA performs the operation A_v1 * (V_pos - V_neg) + A_v2 * V_2, making it useful for liear functino synthesis to add, subtract, and scale signals.",
		typeName: "PGA",
		terminals: {
			pos1: {
				description: "Noninverting input w/ gain Av1",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "+/-0.1V",
			},
			neg1: {
				description: "Inverting input w/ gain Av1",
				direction: DirectionT.OUTPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "+/-0.1V",
			},
			pos2: {
				description: "Noninverting input w/ gain Av2",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "mid-centered",
				acRange: "+/-0.1V",
			},
			reference: {
				description: "unity-gain reference point",
				direction: DirectionT.OUTPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "+/-0.1V",
			},
			output: {
				description: "output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "ref +/-0.1V",
				acRange: "ref +/-0.1V",
			},
		},
		parameters: {
			Av1: {
				parameterType: ParamTypeT.NUMBER,
				description: "Gain for pos1 & neg1 inputs",
				default: "1",
				rangeType: RangeT.INTERVAL,
				range: ["0.1", "5"],
				unit: "V",
				uiComponent: UIComponentT.TEXTBOX,
			},
			Av2: {
				parameterType: ParamTypeT.NUMBER,
				description: "Gain for pos2",
				default: "0.5",
				rangeType: RangeT.INTERVAL,
				range: ["0.1", "5"],
				unit: "V",
				uiComponent: UIComponentT.TEXTBOX,
			},
		},
	},
	SynthesizedFilter: {
		shortDescription: "Synthesize different types of higher order filters",
		longDescription:
			"This component is used to synthesize higher order filters from a set of coefficients. Higher order and other complex filters of different types like Butterwoth, Chebyshev, Bessel etc can be designed and synthesized.",
		typeName: "SynthesizedFilter",
		terminals: {
			input: {
				description: "input",
				direction: DirectionT.INPUT,
				default: "mid",
				dcRange: "rail-to-rail",
				acRange: "+/-0.1V",
			},
			output: {
				description: "output",
				direction: DirectionT.OUTPUT,
				default: null,
				dcRange: "mid-centered",
				acRange: undefined,
			},
		},
		parameters: {
			coefficients: {
				parameterType: ParamTypeT.STRING,
				description: "List of second order section coefficients",
				default: null,
				rangeType: undefined,
				range: undefined,
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
		},
	},
	Source: {
		shortDescription: "Source Terminal Element for the Network",
		longDescription: "Source Terminal Element for the Network",
		typeName: "Source",
		terminals: {
			net: {
				description: "terminal",
				default: null,
				direction: undefined,
				dcRange: undefined,
				acRange: undefined,
			},
		},
		parameters: {
			hardware_pin: {
				parameterType: ParamTypeT.STRING,
				description: "hardware pin",
				default: null,
				rangeType: undefined,
				range: undefined,
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			is_input: {
				parameterType: ParamTypeT.BOOLEAN,
				description: "is_input",
				default: "false",
				rangeType: RangeT.DISCRETE,
				range: ["true", "false"],
				unit: undefined,
				uiComponent: UIComponentT.CHECKBOX,
			},
			is_output: {
				parameterType: ParamTypeT.BOOLEAN,
				description: "is_output",
				default: "false",
				rangeType: RangeT.DISCRETE,
				range: ["true", "false"],
				unit: undefined,
				uiComponent: UIComponentT.CHECKBOX,
			},
		},
	},
	Sink: {
		shortDescription: "Sink Terminal Element for the Network",
		longDescription: "Sink Terminal Element for the Network",
		typeName: "Sink",
		terminals: {
			net: {
				description: "terminal",
				default: null,
				direction: undefined,
				dcRange: undefined,
				acRange: undefined,
			},
		},
		parameters: {
			hardware_pin: {
				parameterType: ParamTypeT.STRING,
				description: "hardware pin",
				default: null,
				rangeType: undefined,
				range: undefined,
				unit: undefined,
				uiComponent: UIComponentT.TEXTBOX,
			},
			is_input: {
				parameterType: ParamTypeT.BOOLEAN,
				description: "is_input",
				default: "false",
				rangeType: RangeT.DISCRETE,
				range: ["true", "false"],
				unit: undefined,
				uiComponent: UIComponentT.CHECKBOX,
			},
			is_output: {
				parameterType: ParamTypeT.BOOLEAN,
				description: "is_output",
				default: "false",
				rangeType: RangeT.DISCRETE,
				range: ["true", "false"],
				unit: undefined,
				uiComponent: UIComponentT.CHECKBOX,
			},
		},
	},
};

export const allElements = Object.values(transformedElements);
